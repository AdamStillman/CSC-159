1) Hardware interrupts need to be cleared and require use of iret.

2) If IRQ 0 is not dismissed, it will not fire again, because it thinks you're still handling the first interrupt and can't fire again on top of that.

3) The kernel code can still get the keyed-in character because it uses SPEDE routines that handle the interrupt request themselves.

4)

5) It's necessary to save tf_p so that we can later resume the process that was just running, and we need to do so before the current process is changed by the scheduler.

6) No. `k' no longer works unless it is hit while a process is actively running (not sleeping), which is almost never.

7) No, if sleep is always called with a positive integer parameter, and this condition is checked every tick. However, using >= instead of == is good "defensive programming" to catch corner cases and deal with future changes.

8) If Sleep() is called with 0 or -1 and we use >= in the previous question, the process will wake up again on the next tick because its wake_tick will be before the sys_tick.

9) The best place to check for range validity is in sys_calls.c, and have Sleep() return an errno if the paramenter is invalid.

10) Yes, if not every timer event is handled (because it occurs before the timer interrupt is marked as serviced by the timerisr.
